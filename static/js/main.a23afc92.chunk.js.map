{"version":3,"sources":["components/PackagesForm.jsx","components/DateRow.jsx","time.js","npm-stats.js","components/Statistics.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PackagesForm","props","state","package","range","handleChange","bind","event","this","setState","target","name","value","type","onChange","React","Component","DateRow","records","dateFormat","columns","map","record","title","date","format","dataIndex","data","reduce","numeral","getMonths","from","to","months","current","isBefore","add","push","clone","getRanges","dates","ranges","i","length","subtract","query","pkg","a","get","getURL","response","downloads","Statistics","progress","start","moment","step","Promise","all","end","count","done","arr","sextuplets","slice","splitInSextuplets","sextuplet","percent","strokeWidth","strokeColor","App","parse","window","location","search","className","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a23afc92.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class PackagesForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      package: props.package,\n      range: props.range,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          Package:\n          <input type='text' name='package' value={this.state.package} onChange={this.handleChange} />\n        </label>\n        <br />\n        <label>\n          Range:\n          <select name='range' value={this.state.range} onChange={this.handleChange} >\n            Range:\n            <option value='monthly'>Monthly</option>\n          </select>\n        </label>\n        <br />\n        <input type='submit' value='Submit' />\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport Table from 'rc-table';\n\nimport numeral from 'numeral';\n\nexport default class DateRow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      records: props.records,\n      dateFormat: props.dateFormat,\n    };\n  }\n\n  render() {\n    const columns = this.state.records.map(record => ({\n      title: record.date.format(this.state.dateFormat),\n      dataIndex: record.date.format(),\n    }));\n\n    const data = [this.state.records.reduce((records, record) =>\n      ({ ...records, [record.date.format()]: numeral(record.data).format('0a') }), {}\n    )];\n\n    return (\n      <Table columns={columns} data={data}/>\n    );\n  }\n}\n","// from is assumed to be the first day of a month\nexport function getMonths(from, to) {\n  const months = [];\n\n  for (let current = from; current.isBefore(to); current = current.add(1, 'M')) {\n    months.push(current.clone());\n  }\n\n  return months;\n}\n\nexport function getRanges(dates) {\n  const ranges = [];\n\n  for (let i = 0; i < (dates.length - 1); ++i) {\n    ranges.push([dates[i].clone(), dates[i + 1].clone().subtract(1, 'd')]);\n  }\n\n  return ranges;\n}\n\nexport function getMonthEnd(time) {\n  return time.clone().add(1, 'M').subtract(1, 'd');\n}\n","import get from 'axios';\n\nexport async function query(pkg, from, to) {\n  const response = await get(getURL(pkg, from, to));\n  return response.data.downloads;\n}\n\nfunction getURL(pkg, from, to) {\n  return `https://api.npmjs.org/downloads/point/${from.format('YYYY-MM-DD')}:${to.format('YYYY-MM-DD')}/${pkg}`;\n}\n","import React from 'react';\nimport { Line } from 'rc-progress';\nimport DateRow from './DateRow';\n\nimport moment from 'moment';\nimport { getMonths, getRanges } from '../time';\nimport { query } from '../npm-stats'\n\nexport default class Statistics extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      package: props.package,\n      range: props.range,\n      progress: 0,\n      records: [],\n    };\n  }\n\n  async componentDidMount() {\n    const start = moment('2018-01-01');\n\n    const months = getMonths(start, moment());\n    const step = 100 / months.length;\n\n    const downloads = await Promise.all(getRanges([...months, moment()]).map(async ([start, end]) => {\n      const count = await query(this.state.package, start, end);\n\n      this.setState({ progress: this.state.progress + step });\n\n      return count;\n    }));\n\n    const records = [];\n    for (let i = 0; i < months.length; ++i) {\n      records.push({ date: months[i], data: downloads[i] });\n    }\n\n    this.setState( { done: true, records });\n  }\n\n  splitInSextuplets(arr) {\n    const sextuplets = [];\n\n    while (arr.length > 0) {\n      sextuplets.push(arr.slice(0, 6));\n      arr = arr.slice(6);\n    }\n\n    return sextuplets;\n  }\n\n  render() {\n    if (!this.state.done) {\n      return (\n        <Line percent={this.state.progress} strokeWidth=\"4\" strokeColor=\"#D3D3D3\" />\n      );\n    } else {\n      return (\n        <div>\n        <text>{this.state.range} downloads for {this.state.package}</text>\n        {\n          this.splitInSextuplets(this.state.records).map(sextuplet =>\n            <DateRow records={sextuplet} dateFormat='MMM-YY' />\n          )\n        }\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport PackagesForm from './components/PackagesForm.jsx'\nimport Statistics from './components/Statistics.jsx'\n\nimport { parse } from 'query-string';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: parse(window.location.search),\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <PackagesForm package={this.state.query.package} range={this.state.query.range} />\n        <Statistics package={this.state.query.package} range={this.state.query.range} />\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["QueryForm.jsx","StatsDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["QueryForm","props","state","package","range","handleChange","bind","event","this","setState","target","name","value","type","onChange","React","Component","StatsDisplay","records","start","moment","months","getMonths","Promise","all","map","month","query","format","time","clone","add","subtract","downloads","i","length","push","record","from","to","current","isBefore","pkg","period","a","get","getURL","response","data","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAEqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,QAAS,0BACTC,MAAO,WAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBARH,E,0EAWNC,GACXC,KAAKC,SAAL,eACGF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,+BAKpC,OACE,8BACE,0CAEE,2BAAOC,KAAK,OAAOF,KAAK,UAAUC,MAAOJ,KAAKN,MAAMC,QAASW,SAAUN,KAAKH,gBAE9E,6BACA,wCAEE,4BAAQM,KAAK,QAAQC,MAAOJ,KAAKN,MAAME,MAAOU,SAAUN,KAAKH,cAA7D,SAEE,4BAAQO,MAAM,UAAd,YAGJ,6BACA,2BAAOC,KAAK,SAASD,MAAM,gB,GAlCIG,IAAMC,W,gDCGxBC,E,YACnB,WAAYhB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXgB,QAAS,IAJM,E,6MASL,0BACNC,EAAQC,EAAO,cAEfC,EAASC,EAAUH,EAAOC,K,SAERG,QAAQC,IAAIH,EAAOI,IAAI,SAAAC,GAAK,OAClDC,EANU,0BAML,UAASD,EAAME,OAAO,cAAtB,aAsCUC,EAtCyCH,EAuCrDG,EAAKC,QAAQC,IAAI,EAAG,KAAKC,SAAS,EAAG,MAvCuBJ,OAAO,gBAsC5E,IAAqBC,K,OAlCjB,IALMI,E,OAIAf,EAAU,GACPgB,EAAI,EAAGA,EAAIb,EAAOc,SAAUD,EACnChB,EAAQkB,KAAK,CAAEV,MAAOL,EAAOa,GAAID,UAAWA,EAAUC,KAGxD1B,KAAKC,SAAU,CAAES,Y,mIAKjB,OACE,6BAEIV,KAAKN,MAAMgB,QAAQO,IAAI,SAAAY,GAAM,OAC3B,6BACE,kCAAQA,EAAOX,MAAME,OAAO,WAA5B,KAA0CS,EAAOJ,UAAjD,KACA,qC,GAnC4BlB,IAAMC,WA4ChD,SAASM,EAAUgB,EAAMC,GAGvB,IAFA,IAAMlB,EAAS,GAENmB,EAAUF,EAAME,EAAQC,SAASF,GAAKC,EAAUA,EAAQT,IAAI,EAAG,KACtEV,EAAOe,KAAKI,EAAQV,SAGtB,OAAOT,E,SAOMM,E,+EAAf,WAAqBe,EAAKC,GAA1B,eAAAC,EAAA,qEACyBC,IAAIC,EAAOJ,EAAKC,IADzC,cACQI,EADR,yBAESA,EAASC,KAAKf,WAFvB,0C,sBAKA,SAASa,EAAOJ,EAAKC,GACnB,MAAM,yCAAN,OAAgDA,EAAhD,YAA0DD,GCrD7CO,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6dfdd101.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class QueryForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      package: '@openzeppelin/contracts',\n      range: 'Monthly',\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          Package:\n          <input type='text' name='package' value={this.state.package} onChange={this.handleChange} />\n        </label>\n        <br />\n        <label>\n          Range:\n          <select name='range' value={this.state.range} onChange={this.handleChange} >\n            Range:\n            <option value='monthy'>Montly</option>\n          </select>\n        </label>\n        <br />\n        <input type='submit' value='Submit' />\n      </form>\n    )\n  }\n}\n","import React from 'react';\n\nimport get from 'axios';\nimport * as moment from 'moment';\n\nexport default class StatsDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      records: [],\n    };\n  }\n\n  async componentDidMount() {\n    const pkg = '@openzeppelin/contracts';\n    const start = moment('2019-01-01');\n\n    const months = getMonths(start, moment());\n\n    const downloads = await Promise.all(months.map(month =>\n      query(pkg, `${month.format('YYYY-MM-DD')}:${getMonthEnd(month).format('YYYY-MM-DD')}`)\n    ));\n\n    const records = [];\n    for (let i = 0; i < months.length; ++i) {\n      records.push({ month: months[i], downloads: downloads[i] });\n    }\n\n    this.setState( { records });\n  }\n\n\n  render() {\n    return (\n      <div>\n        {\n          this.state.records.map(record =>\n            <div>\n              <text> {record.month.format('YYYY-MM')}: {record.downloads} </text>\n              <br />\n            </div>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nfunction getMonths(from, to) {\n  const months = [];\n\n  for (let current = from; current.isBefore(to); current = current.add(1, 'M')) {\n    months.push(current.clone());\n  }\n\n  return months;\n}\n\nfunction getMonthEnd(time) {\n  return time.clone().add(1, 'M').subtract(1, 'd');\n}\n\nasync function query(pkg, period) {\n  const response = await get(getURL(pkg, period));\n  return response.data.downloads;\n}\n\nfunction getURL(pkg, period) {\n  return `https://api.npmjs.org/downloads/point/${period}/${pkg}`;\n}\n","import React from 'react';\nimport './App.css';\nimport QueryForm from './QueryForm.jsx'\nimport StatsDisplay from './StatsDisplay.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <QueryForm />\n      <StatsDisplay />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}